
-- =====================================
-- ADDITIONAL ANALYTICS TABLES
-- =====================================
-- Run this only if you need additional analytics features

-- Performance monitoring table
CREATE TABLE IF NOT EXISTS public.performance_metrics (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  metric_date DATE NOT NULL,
  avg_response_time DECIMAL(8,3) DEFAULT 0,
  max_response_time DECIMAL(8,3) DEFAULT 0,
  min_response_time DECIMAL(8,3) DEFAULT 0,
  error_rate DECIMAL(5,4) DEFAULT 0,
  total_requests INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  CONSTRAINT unique_performance_date UNIQUE (metric_date)
);

-- Engagement metrics table
CREATE TABLE IF NOT EXISTS public.engagement_metrics (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  metric_date DATE NOT NULL,
  total_conversations INTEGER DEFAULT 0,
  avg_messages_per_conversation DECIMAL(6,2) DEFAULT 0,
  bounce_rate DECIMAL(5,4) DEFAULT 0,
  retention_rate DECIMAL(5,4) DEFAULT 0,
  images_shared INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  CONSTRAINT unique_engagement_date UNIQUE (metric_date)
);

-- User behavior tracking
CREATE TABLE IF NOT EXISTS public.user_behavior_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id TEXT NOT NULL,
  user_pseudo_id TEXT NOT NULL,
  action_type TEXT NOT NULL, -- 'click', 'scroll', 'hover', 'type'
  element_id TEXT,
  page_path TEXT,
  timestamp TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  additional_data JSONB
);

-- A/B testing results
CREATE TABLE IF NOT EXISTS public.ab_test_results (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  test_name TEXT NOT NULL,
  variant TEXT NOT NULL,
  user_pseudo_id TEXT NOT NULL,
  session_id TEXT NOT NULL,
  conversion_event TEXT,
  converted BOOLEAN DEFAULT FALSE,
  timestamp TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Error tracking
CREATE TABLE IF NOT EXISTS public.error_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id TEXT NOT NULL,
  error_type TEXT NOT NULL,
  error_message TEXT,
  error_stack TEXT,
  page_path TEXT,
  user_agent TEXT,
  timestamp TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Enable RLS
ALTER TABLE public.performance_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.engagement_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_behavior_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ab_test_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.error_log ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Allow anon access to performance_metrics" ON public.performance_metrics FOR ALL USING (true);
CREATE POLICY "Allow anon access to engagement_metrics" ON public.engagement_metrics FOR ALL USING (true);
CREATE POLICY "Allow anon access to user_behavior_log" ON public.user_behavior_log FOR ALL USING (true);
CREATE POLICY "Allow anon access to ab_test_results" ON public.ab_test_results FOR ALL USING (true);
CREATE POLICY "Allow anon access to error_log" ON public.error_log FOR ALL USING (true);

-- Create indexes
CREATE INDEX idx_performance_metrics_date ON public.performance_metrics(metric_date);
CREATE INDEX idx_engagement_metrics_date ON public.engagement_metrics(metric_date);
CREATE INDEX idx_user_behavior_session ON public.user_behavior_log(session_id);
CREATE INDEX idx_user_behavior_timestamp ON public.user_behavior_log(timestamp);
CREATE INDEX idx_ab_test_user ON public.ab_test_results(user_pseudo_id);
CREATE INDEX idx_error_log_timestamp ON public.error_log(timestamp);

-- Advanced analytics functions
CREATE OR REPLACE FUNCTION get_conversion_funnel()
RETURNS TABLE(
  step_name TEXT,
  total_users BIGINT,
  conversion_rate DECIMAL(5,2)
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  WITH funnel_steps AS (
    SELECT 'Page Visit' as step, COUNT(DISTINCT session_id) as users FROM public.page_views
    UNION ALL
    SELECT 'Chat Started' as step, COUNT(DISTINCT session_id) as users FROM public.user_sessions WHERE messages_sent > 0
    UNION ALL
    SELECT 'Message Sent' as step, COUNT(DISTINCT chat_id) as users FROM public.messages_log WHERE sender_type = 'user'
    UNION ALL
    SELECT 'Image Shared' as step, COUNT(DISTINCT chat_id) as users FROM public.messages_log WHERE has_image = true
  ),
  total_visitors AS (
    SELECT users as total FROM funnel_steps WHERE step = 'Page Visit'
  )
  SELECT 
    fs.step as step_name,
    fs.users as total_users,
    COALESCE((fs.users * 100.0 / NULLIF(tv.total, 0)), 0)::DECIMAL(5,2) as conversion_rate
  FROM funnel_steps fs
  CROSS JOIN total_visitors tv
  ORDER BY fs.users DESC;
END;
$$;

GRANT EXECUTE ON FUNCTION get_conversion_funnel() TO anon;
