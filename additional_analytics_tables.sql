
-- Additional tables for real analytics tracking
-- Run this in your Supabase SQL editor

-- First, add the missing columns to existing tables
ALTER TABLE public.messages_log 
ADD COLUMN IF NOT EXISTS has_image BOOLEAN DEFAULT FALSE;

ALTER TABLE public.user_sessions 
ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE,
ADD COLUMN IF NOT EXISTS messages_sent INTEGER DEFAULT 0;

-- Create missing tables if they don't exist
CREATE TABLE IF NOT EXISTS public.messages_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  message_id TEXT UNIQUE NOT NULL,
  sender_type TEXT NOT NULL CHECK (sender_type IN ('user', 'ai')),
  chat_id TEXT NOT NULL DEFAULT 'kruthika_chat',
  text_content TEXT,
  has_image BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

CREATE TABLE IF NOT EXISTS public.daily_activity_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  activity_date DATE NOT NULL,
  user_pseudo_id TEXT NOT NULL,
  activity_type TEXT DEFAULT 'active',
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  CONSTRAINT unique_daily_user UNIQUE (activity_date, user_pseudo_id)
);

-- User sessions table for real session tracking
CREATE TABLE IF NOT EXISTS public.user_sessions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id TEXT UNIQUE NOT NULL,
  user_pseudo_id TEXT NOT NULL,
  started_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  ended_at TIMESTAMPTZ,
  duration_seconds INTEGER,
  page_views INTEGER DEFAULT 0,
  messages_sent INTEGER DEFAULT 0,
  device_type TEXT,
  browser TEXT,
  country_code TEXT,
  timezone TEXT,
  referrer TEXT,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Page views table for real page tracking
CREATE TABLE IF NOT EXISTS public.page_views (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id TEXT NOT NULL,
  page_path TEXT NOT NULL,
  page_title TEXT,
  viewed_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  time_on_page INTEGER, -- seconds
  referrer TEXT,
  user_agent TEXT
);

-- Real ad interactions table
CREATE TABLE IF NOT EXISTS public.ad_interactions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id TEXT NOT NULL,
  ad_type TEXT NOT NULL, -- 'banner', 'native', 'social', 'popunder', 'direct_link'
  ad_network TEXT NOT NULL, -- 'adsterra', 'monetag'
  action_type TEXT NOT NULL, -- 'view', 'click', 'close'
  page_path TEXT,
  timestamp TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  user_country TEXT,
  device_type TEXT
);

-- User device and location tracking
CREATE TABLE IF NOT EXISTS public.user_analytics (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id TEXT NOT NULL,
  user_pseudo_id TEXT NOT NULL,
  country_code TEXT,
  country_name TEXT,
  timezone TEXT,
  device_type TEXT, -- 'mobile', 'desktop', 'tablet'
  browser TEXT,
  os TEXT,
  screen_resolution TEXT,
  language TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  CONSTRAINT unique_session_analytics UNIQUE (session_id)
);

-- Cookie consent tracking
CREATE TABLE IF NOT EXISTS public.cookie_consents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id TEXT NOT NULL,
  necessary BOOLEAN DEFAULT TRUE,
  analytics BOOLEAN DEFAULT FALSE,
  advertising BOOLEAN DEFAULT FALSE,
  personalization BOOLEAN DEFAULT FALSE,
  ai_learning BOOLEAN DEFAULT FALSE,
  intimacy_level BOOLEAN DEFAULT FALSE,
  timestamp TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- User journey funnel tracking
CREATE TABLE IF NOT EXISTS public.user_journey_steps (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id TEXT NOT NULL,
  step_name TEXT NOT NULL, -- 'landing', 'chat_started', 'message_sent', 'image_shared', 'long_session', 'return_visit'
  step_order INTEGER,
  completed_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  page_path TEXT,
  additional_data JSONB
);

-- Create function to increment session messages
CREATE OR REPLACE FUNCTION increment_session_messages(session_id_param TEXT)
RETURNS void AS $$
BEGIN
  UPDATE public.user_sessions 
  SET messages_sent = COALESCE(messages_sent, 0) + 1
  WHERE session_id = session_id_param;
END;
$$ LANGUAGE plpgsql;

-- Enable RLS on all tables
ALTER TABLE public.messages_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.daily_activity_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.page_views ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ad_interactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_analytics ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cookie_consents ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_journey_steps ENABLE ROW LEVEL SECURITY;

-- Create policies for anonymous access (adjust for production)
DROP POLICY IF EXISTS "Allow anon access to messages_log" ON public.messages_log;
DROP POLICY IF EXISTS "Allow anon access to daily_activity_log" ON public.daily_activity_log;
DROP POLICY IF EXISTS "Allow anon access to user_sessions" ON public.user_sessions;
DROP POLICY IF EXISTS "Allow anon access to page_views" ON public.page_views;
DROP POLICY IF EXISTS "Allow anon access to ad_interactions" ON public.ad_interactions;
DROP POLICY IF EXISTS "Allow anon access to user_analytics" ON public.user_analytics;
DROP POLICY IF EXISTS "Allow anon access to cookie_consents" ON public.cookie_consents;
DROP POLICY IF EXISTS "Allow anon access to user_journey_steps" ON public.user_journey_steps;

CREATE POLICY "Allow anon access to messages_log" ON public.messages_log FOR ALL USING (true);
CREATE POLICY "Allow anon access to daily_activity_log" ON public.daily_activity_log FOR ALL USING (true);
CREATE POLICY "Allow anon access to user_sessions" ON public.user_sessions FOR ALL USING (true);
CREATE POLICY "Allow anon access to page_views" ON public.page_views FOR ALL USING (true);
CREATE POLICY "Allow anon access to ad_interactions" ON public.ad_interactions FOR ALL USING (true);
CREATE POLICY "Allow anon access to user_analytics" ON public.user_analytics FOR ALL USING (true);
CREATE POLICY "Allow anon access to cookie_consents" ON public.cookie_consents FOR ALL USING (true);
CREATE POLICY "Allow anon access to user_journey_steps" ON public.user_journey_steps FOR ALL USING (true);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_messages_log_created_at ON public.messages_log(created_at);
CREATE INDEX IF NOT EXISTS idx_messages_log_sender_type ON public.messages_log(sender_type);
CREATE INDEX IF NOT EXISTS idx_daily_activity_date ON public.daily_activity_log(activity_date);
CREATE INDEX IF NOT EXISTS idx_user_sessions_session_id ON public.user_sessions(session_id);
CREATE INDEX IF NOT EXISTS idx_user_sessions_started_at ON public.user_sessions(started_at);
CREATE INDEX IF NOT EXISTS idx_user_sessions_is_active ON public.user_sessions(is_active);
CREATE INDEX IF NOT EXISTS idx_page_views_session_id ON public.page_views(session_id);
CREATE INDEX IF NOT EXISTS idx_page_views_viewed_at ON public.page_views(viewed_at);
CREATE INDEX IF NOT EXISTS idx_ad_interactions_timestamp ON public.ad_interactions(timestamp);
CREATE INDEX IF NOT EXISTS idx_user_analytics_session_id ON public.user_analytics(session_id);
CREATE INDEX IF NOT EXISTS idx_cookie_consents_timestamp ON public.cookie_consents(timestamp);
CREATE INDEX IF NOT EXISTS idx_user_journey_session_id ON public.user_journey_steps(session_id);
