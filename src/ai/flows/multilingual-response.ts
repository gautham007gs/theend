// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that detects the language a user is chatting in and then generates responses that are linguistically appropriate and culturally relevant for that user.
 *
 * - multilingualResponse - A function that handles the multilingual response process.
 * - MultilingualResponseInput - The input type for the multilingualResponse function.
 * - MultilingualResponseOutput - The return type for the multilingualResponse function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const MultilingualResponseInputSchema = z.object({
  message: z.string().describe('The user message.'),
});
export type MultilingualResponseInput = z.infer<typeof MultilingualResponseInputSchema>;

const MultilingualResponseOutputSchema = z.object({
  response: z.string().describe('The AI response in the user\u0027s language.'),
});
export type MultilingualResponseOutput = z.infer<typeof MultilingualResponseOutputSchema>;

export async function multilingualResponse(input: MultilingualResponseInput): Promise<MultilingualResponseOutput> {
  return multilingualResponseFlow(input);
}

const multilingualResponsePrompt = ai.definePrompt({
  name: 'multilingualResponsePrompt',
  input: {schema: MultilingualResponseInputSchema},
  output: {schema: MultilingualResponseOutputSchema},
  prompt: `You are chatting with a user.  Detect the language that the user is using, and respond to them in that same language, using culturally relevant slang and colloquialisms.

User message: {{{message}}}`,
});

const multilingualResponseFlow = ai.defineFlow(
  {
    name: 'multilingualResponseFlow',
    inputSchema: MultilingualResponseInputSchema,
    outputSchema: MultilingualResponseOutputSchema,
  },
  async input => {
    const {output} = await multilingualResponsePrompt(input);
    return output!;
  }
);
